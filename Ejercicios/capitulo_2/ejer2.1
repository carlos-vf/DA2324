#lang racket
(define (cons x y)
  (lambda (m) (m x y)))

(define (lista-un-elemento a) (cons a null))
(define (anadir l p)
  (lambda (m) (m  p l )))

(define (car z)
  (z (lambda (p q) p)))
(define (cdr z)
  (z (lambda (p q) q)))

(define (make-rat n d) (cons n d)) ;Devuelva un "objeto" tipo rational
(define (numer x) (car x)) ; Devolver el numerador
(define (denom x) (cdr x)) ; Devolver el denominador
 

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

(cdr (cdr (cdr  (anadir (anadir (anadir 1 null) 2) 3))))


(define (numerador x)
  (if (even? x)
      (+ 1 (numerador (/ x 2)))
      0))

(define (denominador x)
  (if (= 0 (remainder x 3))
      (+ 1 (denominador (/ x 3)))
      0))